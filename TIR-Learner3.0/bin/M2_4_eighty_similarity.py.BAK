import os
import subprocess
import multiprocessing as mp
import pandas as pd

from process_homology import process_result

# from typing import TYPE_CHECKING
# if TYPE_CHECKING:
#     from main import TIRLearner

import prog_const




# def processHomology(file, species):
#     homo = pd.DataFrame()
#     for i in TEs:
#         blast = f"{file}{spliter}blast{spliter}{species}_{i}_RefLib"
#         if os.path.exists(blast) and os.path.getsize(blast) != 0:
#             df = pd.read_csv(blast, header=None, names=blast_header, dtype=blast_type, sep="\t")
#             df = df.loc[(df["qcovhsp"] >= 80) & (df["pident"] >= 80)]
#
#             df["sseqid"] = df.swifter.progress_bar(True).apply(lambda x: x["qseqid"].split(":")[0], axis=1)
#             df["sstart"] = df.swifter.progress_bar(True).apply(lambda x: int(x["qseqid"].split(":")[1]), axis=1)
#             df["send"] = df.swifter.progress_bar(True).apply(lambda x: int(x["qseqid"].split(":")[2]), axis=1)
#
#             df = df.sort_values(["sseqid", "sstart", "send", "qcovhsp", "pident"],
#                                 ascending=[True, True, True, True, True])
#             df = df.drop_duplicates(["sseqid", "sstart", "send"], keep="last")
#             df.insert(0, "TE", i)
#             homo = pd.concat([homo, df], ignore_index=True)
#     return homo


def process_homology_eighty_similarity(file_name, species, TIR_type):
    blast_header = ("qseqid", "sseqid", "length", "pident", "gaps", "mismatch",
                    "qstart", "qend", "sstart", "send", "evalue", "qcovhsp")
    blast_type = {"length": int, "gaps": int, "mismatch": int,
                  "qstart": int, "qend": int, "sstart": int, "send": int}

    blast = f"{file_name}{prog_const.spliter}blast{prog_const.spliter}{species}_{TIR_type}_RefLib"
    df = None
    if os.path.exists(blast) and os.path.getsize(blast) != 0:
        # df = pd.read_csv(blast, sep='\t', header=None, names=blast_header, dtype=blast_type, engine="pyarrow")
        df = pd.read_csv(blast, sep='\t', header=None, names=blast_header, dtype=blast_type, engine='c',
                         memory_map=True)
        df = df.loc[(df["qcovhsp"] >= 80) & (df["pident"] >= 80)].reset_index(drop=True)

        df["sseqid"] = df.swifter.progress_bar(True).apply(lambda x: x["qseqid"].split(":")[0], axis=1)
        df["sstart"] = df.swifter.progress_bar(True).apply(lambda x: int(x["qseqid"].split(":")[1]), axis=1)
        df["send"] = df.swifter.progress_bar(True).apply(lambda x: int(x["qseqid"].split(":")[2]), axis=1)

        df = df.sort_values(["sseqid", "sstart", "send", "qcovhsp", "pident"],
                            ascending=[True, True, True, True, True], ignore_index=True)
        df = df.drop_duplicates(["sseqid", "sstart", "send"], keep="last", ignore_index=True)
        df.insert(0, "TIR_type", TIR_type)
    return df


def select_eighty_similarity(TIRLearner_instance) -> pd.DataFrame:
    print("Module 2, Step 4: Select 80% similar entries from Blast results")
    mp_args_list = [(TIRLearner_instance.processedGRFmite_file, TIRLearner_instance.species, TIR_type)
                    for TIR_type in prog_const.TIR_types]
    with mp.Pool(int(TIRLearner_instance.cpu_cores)) as pool:
        df_list = pool.starmap(process_homology_eighty_similarity, mp_args_list)
    subprocess.Popen(["find", ".", "-name", f"*{prog_const.spliter}blast{prog_const.spliter}*", "-delete"])
    return process_result(df_list, TIRLearner_instance.species)
